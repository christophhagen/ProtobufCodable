// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Tests/ProtobufCodableTests/Definitions/TestTypes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtoEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case zero // = 0
  case one // = 1
  case two // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .zero
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .zero
    case 1: self = .one
    case 2: self = .two
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .zero: return 0
    case .one: return 1
    case .two: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProtoEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ProtoEnum] = [
    .zero,
    .one,
    .two,
  ]
}

#endif  // swift(>=4.2)

/// A Struct with all primitive proto types
struct MessageWithPrimitives {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Swift equivalent: `Double`
  var double: Double = 0

  /// Swift equivalent: `Float`
  var float: Float = 0

  /// Swift equivalent: `Int32`
  var int32: Int32 = 0

  /// Swift equivalent: `Int64`, or `Int`
  var int64: Int64 = 0

  /// Swift equivalent: `UInt32`
  var uint32: UInt32 = 0

  /// Swift equivalent: `UInt64`
  var uint64: UInt64 = 0

  /// Swift equivalent: `Signed<Int32>`
  var sint32: Int32 = 0

  /// Swift equivalent: `Signed<Int64>`
  var sint64: Int64 = 0

  /// Swift equivalent: `Fixed<UInt32>`
  var fixed32: UInt32 = 0

  /// Swift equivalent: `Fixed<UInt64>`
  var fixed64: UInt64 = 0

  /// Swift equivalent: `Fixed<Int32>`
  var sfixed32: Int32 = 0

  /// Swift equivalent: `Fixed<Int64>`, `Fixed<Int>`
  var sfixed64: Int64 = 0

  /// Swift equivalent: `Bool`
  var bool: Bool = false

  /// Swift equivalent: `String`
  var string: String = String()

  /// Swift equivalent: `Data`
  var bytes: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessageWithArrays {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Swift equivalent: `[Double]`
  var double: [Double] = []

  /// Swift equivalent: `[Float]`
  var float: [Float] = []

  /// Swift equivalent: `[Int32]`
  var int32: [Int32] = []

  /// Swift equivalent: `[Int64]`, or `[Int]`
  var int64: [Int64] = []

  /// Swift equivalent: `[UInt32]`
  var uint32: [UInt32] = []

  /// Swift equivalent: `[UInt64]`
  var uint64: [UInt64] = []

  /// Swift equivalent: `[Signed<Int32>]`
  var sint32: [Int32] = []

  /// Swift equivalent: `[Signed<Int64>]`
  var sint64: [Int64] = []

  /// Swift equivalent: `[Fixed<UInt32>]`
  var fixed32: [UInt32] = []

  /// Swift equivalent: `[Fixed<UInt64>]`
  var fixed64: [UInt64] = []

  /// Swift equivalent: `[Fixed<Int32>]`
  var sfixed32: [Int32] = []

  /// Swift equivalent: `[Fixed<Int64>]`, `[Fixed<Int>]`
  var sfixed64: [Int64] = []

  /// Swift equivalent: `[Bool]`
  var bool: [Bool] = []

  /// Swift equivalent: `[String]`
  var string: [String] = []

  /// Swift equivalent: `[Data]`
  var bytes: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessageWithUnpackedArrays {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Swift equivalent: `[Double]`
  var double: [Double] = []

  /// Swift equivalent: `[Float]`
  var float: [Float] = []

  /// Swift equivalent: `[Int32]`
  var int32: [Int32] = []

  /// Swift equivalent: `[Int64]`, or `[Int]`
  var int64: [Int64] = []

  /// Swift equivalent: `[UInt32]`
  var uint32: [UInt32] = []

  /// Swift equivalent: `[UInt64]`
  var uint64: [UInt64] = []

  /// Swift equivalent: `[Signed<Int32>]`
  var sint32: [Int32] = []

  /// Swift equivalent: `[Signed<Int64>]`
  var sint64: [Int64] = []

  /// Swift equivalent: `[Fixed<UInt32>]`
  var fixed32: [UInt32] = []

  /// Swift equivalent: `[Fixed<UInt64>]`
  var fixed64: [UInt64] = []

  /// Swift equivalent: `[Fixed<Int32>]`
  var sfixed32: [Int32] = []

  /// Swift equivalent: `[Fixed<Int64>]`, `[Fixed<Int>]`
  var sfixed64: [Int64] = []

  /// Swift equivalent: `[Bool]`
  var bool: [Bool] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

//// A message containing a single other message
struct MessageWithMessages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var one: MessageWithPrimitives {
    get {return _storage._one ?? MessageWithPrimitives()}
    set {_uniqueStorage()._one = newValue}
  }
  /// Returns true if `one` has been explicitly set.
  var hasOne: Bool {return _storage._one != nil}
  /// Clears the value of `one`. Subsequent reads from it will return its default value.
  mutating func clearOne() {_uniqueStorage()._one = nil}

  var two: MessageWithPrimitives {
    get {return _storage._two ?? MessageWithPrimitives()}
    set {_uniqueStorage()._two = newValue}
  }
  /// Returns true if `two` has been explicitly set.
  var hasTwo: Bool {return _storage._two != nil}
  /// Clears the value of `two`. Subsequent reads from it will return its default value.
  mutating func clearTwo() {_uniqueStorage()._two = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct MessageWithEnum {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: ProtoEnum = .zero

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessageWithOneOf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Int32 = 0

  var myOneOf: MessageWithOneOf.OneOf_MyOneOf? = nil

  var string: String {
    get {
      if case .string(let v)? = myOneOf {return v}
      return String()
    }
    set {myOneOf = .string(newValue)}
  }

  var bytes: Data {
    get {
      if case .bytes(let v)? = myOneOf {return v}
      return Data()
    }
    set {myOneOf = .bytes(newValue)}
  }

  var int32: Int32 {
    get {
      if case .int32(let v)? = myOneOf {return v}
      return 0
    }
    set {myOneOf = .int32(newValue)}
  }

  var message: MessageWithPrimitives {
    get {
      if case .message(let v)? = myOneOf {return v}
      return MessageWithPrimitives()
    }
    set {myOneOf = .message(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_MyOneOf: Equatable {
    case string(String)
    case bytes(Data)
    case int32(Int32)
    case message(MessageWithPrimitives)

  #if !swift(>=4.1)
    static func ==(lhs: MessageWithOneOf.OneOf_MyOneOf, rhs: MessageWithOneOf.OneOf_MyOneOf) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.string, .string): return {
        guard case .string(let l) = lhs, case .string(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bytes, .bytes): return {
        guard case .bytes(let l) = lhs, case .bytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.int32, .int32): return {
        guard case .int32(let l) = lhs, case .int32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct MessageWithMaps {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stringToBytes: Dictionary<String,Data> = [:]

  var uintToString: Dictionary<UInt32,String> = [:]

  var intToMessage: Dictionary<Int64,MessageWithPrimitives> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ProtoEnum: @unchecked Sendable {}
extension MessageWithPrimitives: @unchecked Sendable {}
extension MessageWithArrays: @unchecked Sendable {}
extension MessageWithUnpackedArrays: @unchecked Sendable {}
extension MessageWithMessages: @unchecked Sendable {}
extension MessageWithEnum: @unchecked Sendable {}
extension MessageWithOneOf: @unchecked Sendable {}
extension MessageWithOneOf.OneOf_MyOneOf: @unchecked Sendable {}
extension MessageWithMaps: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ZERO"),
    1: .same(proto: "ONE"),
    2: .same(proto: "TWO"),
  ]
}

extension MessageWithPrimitives: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithPrimitives"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "float"),
    3: .same(proto: "int32"),
    4: .same(proto: "int64"),
    5: .same(proto: "uint32"),
    6: .same(proto: "uint64"),
    7: .same(proto: "sint32"),
    8: .same(proto: "sint64"),
    9: .same(proto: "fixed32"),
    10: .same(proto: "fixed64"),
    11: .same(proto: "sfixed32"),
    12: .same(proto: "sfixed64"),
    13: .same(proto: "bool"),
    14: .same(proto: "string"),
    15: .same(proto: "bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.double) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.float) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.int32) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.int64) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.uint32) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.uint64) }()
      case 7: try { try decoder.decodeSingularSInt32Field(value: &self.sint32) }()
      case 8: try { try decoder.decodeSingularSInt64Field(value: &self.sint64) }()
      case 9: try { try decoder.decodeSingularFixed32Field(value: &self.fixed32) }()
      case 10: try { try decoder.decodeSingularFixed64Field(value: &self.fixed64) }()
      case 11: try { try decoder.decodeSingularSFixed32Field(value: &self.sfixed32) }()
      case 12: try { try decoder.decodeSingularSFixed64Field(value: &self.sfixed64) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.bool) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.string) }()
      case 15: try { try decoder.decodeSingularBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.double != 0 {
      try visitor.visitSingularDoubleField(value: self.double, fieldNumber: 1)
    }
    if self.float != 0 {
      try visitor.visitSingularFloatField(value: self.float, fieldNumber: 2)
    }
    if self.int32 != 0 {
      try visitor.visitSingularInt32Field(value: self.int32, fieldNumber: 3)
    }
    if self.int64 != 0 {
      try visitor.visitSingularInt64Field(value: self.int64, fieldNumber: 4)
    }
    if self.uint32 != 0 {
      try visitor.visitSingularUInt32Field(value: self.uint32, fieldNumber: 5)
    }
    if self.uint64 != 0 {
      try visitor.visitSingularUInt64Field(value: self.uint64, fieldNumber: 6)
    }
    if self.sint32 != 0 {
      try visitor.visitSingularSInt32Field(value: self.sint32, fieldNumber: 7)
    }
    if self.sint64 != 0 {
      try visitor.visitSingularSInt64Field(value: self.sint64, fieldNumber: 8)
    }
    if self.fixed32 != 0 {
      try visitor.visitSingularFixed32Field(value: self.fixed32, fieldNumber: 9)
    }
    if self.fixed64 != 0 {
      try visitor.visitSingularFixed64Field(value: self.fixed64, fieldNumber: 10)
    }
    if self.sfixed32 != 0 {
      try visitor.visitSingularSFixed32Field(value: self.sfixed32, fieldNumber: 11)
    }
    if self.sfixed64 != 0 {
      try visitor.visitSingularSFixed64Field(value: self.sfixed64, fieldNumber: 12)
    }
    if self.bool != false {
      try visitor.visitSingularBoolField(value: self.bool, fieldNumber: 13)
    }
    if !self.string.isEmpty {
      try visitor.visitSingularStringField(value: self.string, fieldNumber: 14)
    }
    if !self.bytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytes, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithPrimitives, rhs: MessageWithPrimitives) -> Bool {
    if lhs.double != rhs.double {return false}
    if lhs.float != rhs.float {return false}
    if lhs.int32 != rhs.int32 {return false}
    if lhs.int64 != rhs.int64 {return false}
    if lhs.uint32 != rhs.uint32 {return false}
    if lhs.uint64 != rhs.uint64 {return false}
    if lhs.sint32 != rhs.sint32 {return false}
    if lhs.sint64 != rhs.sint64 {return false}
    if lhs.fixed32 != rhs.fixed32 {return false}
    if lhs.fixed64 != rhs.fixed64 {return false}
    if lhs.sfixed32 != rhs.sfixed32 {return false}
    if lhs.sfixed64 != rhs.sfixed64 {return false}
    if lhs.bool != rhs.bool {return false}
    if lhs.string != rhs.string {return false}
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithArrays: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithArrays"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "float"),
    3: .same(proto: "int32"),
    4: .same(proto: "int64"),
    5: .same(proto: "uint32"),
    6: .same(proto: "uint64"),
    7: .same(proto: "sint32"),
    8: .same(proto: "sint64"),
    9: .same(proto: "fixed32"),
    10: .same(proto: "fixed64"),
    11: .same(proto: "sfixed32"),
    12: .same(proto: "sfixed64"),
    13: .same(proto: "bool"),
    14: .same(proto: "string"),
    15: .same(proto: "bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.double) }()
      case 2: try { try decoder.decodeRepeatedFloatField(value: &self.float) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.int32) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.int64) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.uint32) }()
      case 6: try { try decoder.decodeRepeatedUInt64Field(value: &self.uint64) }()
      case 7: try { try decoder.decodeRepeatedSInt32Field(value: &self.sint32) }()
      case 8: try { try decoder.decodeRepeatedSInt64Field(value: &self.sint64) }()
      case 9: try { try decoder.decodeRepeatedFixed32Field(value: &self.fixed32) }()
      case 10: try { try decoder.decodeRepeatedFixed64Field(value: &self.fixed64) }()
      case 11: try { try decoder.decodeRepeatedSFixed32Field(value: &self.sfixed32) }()
      case 12: try { try decoder.decodeRepeatedSFixed64Field(value: &self.sfixed64) }()
      case 13: try { try decoder.decodeRepeatedBoolField(value: &self.bool) }()
      case 14: try { try decoder.decodeRepeatedStringField(value: &self.string) }()
      case 15: try { try decoder.decodeRepeatedBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.double.isEmpty {
      try visitor.visitPackedDoubleField(value: self.double, fieldNumber: 1)
    }
    if !self.float.isEmpty {
      try visitor.visitPackedFloatField(value: self.float, fieldNumber: 2)
    }
    if !self.int32.isEmpty {
      try visitor.visitPackedInt32Field(value: self.int32, fieldNumber: 3)
    }
    if !self.int64.isEmpty {
      try visitor.visitPackedInt64Field(value: self.int64, fieldNumber: 4)
    }
    if !self.uint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.uint32, fieldNumber: 5)
    }
    if !self.uint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.uint64, fieldNumber: 6)
    }
    if !self.sint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: self.sint32, fieldNumber: 7)
    }
    if !self.sint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: self.sint64, fieldNumber: 8)
    }
    if !self.fixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.fixed32, fieldNumber: 9)
    }
    if !self.fixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.fixed64, fieldNumber: 10)
    }
    if !self.sfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: self.sfixed32, fieldNumber: 11)
    }
    if !self.sfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: self.sfixed64, fieldNumber: 12)
    }
    if !self.bool.isEmpty {
      try visitor.visitPackedBoolField(value: self.bool, fieldNumber: 13)
    }
    if !self.string.isEmpty {
      try visitor.visitRepeatedStringField(value: self.string, fieldNumber: 14)
    }
    if !self.bytes.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.bytes, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithArrays, rhs: MessageWithArrays) -> Bool {
    if lhs.double != rhs.double {return false}
    if lhs.float != rhs.float {return false}
    if lhs.int32 != rhs.int32 {return false}
    if lhs.int64 != rhs.int64 {return false}
    if lhs.uint32 != rhs.uint32 {return false}
    if lhs.uint64 != rhs.uint64 {return false}
    if lhs.sint32 != rhs.sint32 {return false}
    if lhs.sint64 != rhs.sint64 {return false}
    if lhs.fixed32 != rhs.fixed32 {return false}
    if lhs.fixed64 != rhs.fixed64 {return false}
    if lhs.sfixed32 != rhs.sfixed32 {return false}
    if lhs.sfixed64 != rhs.sfixed64 {return false}
    if lhs.bool != rhs.bool {return false}
    if lhs.string != rhs.string {return false}
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithUnpackedArrays: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithUnpackedArrays"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "float"),
    3: .same(proto: "int32"),
    4: .same(proto: "int64"),
    5: .same(proto: "uint32"),
    6: .same(proto: "uint64"),
    7: .same(proto: "sint32"),
    8: .same(proto: "sint64"),
    9: .same(proto: "fixed32"),
    10: .same(proto: "fixed64"),
    11: .same(proto: "sfixed32"),
    12: .same(proto: "sfixed64"),
    13: .same(proto: "bool"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.double) }()
      case 2: try { try decoder.decodeRepeatedFloatField(value: &self.float) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.int32) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.int64) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.uint32) }()
      case 6: try { try decoder.decodeRepeatedUInt64Field(value: &self.uint64) }()
      case 7: try { try decoder.decodeRepeatedSInt32Field(value: &self.sint32) }()
      case 8: try { try decoder.decodeRepeatedSInt64Field(value: &self.sint64) }()
      case 9: try { try decoder.decodeRepeatedFixed32Field(value: &self.fixed32) }()
      case 10: try { try decoder.decodeRepeatedFixed64Field(value: &self.fixed64) }()
      case 11: try { try decoder.decodeRepeatedSFixed32Field(value: &self.sfixed32) }()
      case 12: try { try decoder.decodeRepeatedSFixed64Field(value: &self.sfixed64) }()
      case 13: try { try decoder.decodeRepeatedBoolField(value: &self.bool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.double.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.double, fieldNumber: 1)
    }
    if !self.float.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.float, fieldNumber: 2)
    }
    if !self.int32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.int32, fieldNumber: 3)
    }
    if !self.int64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: self.int64, fieldNumber: 4)
    }
    if !self.uint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.uint32, fieldNumber: 5)
    }
    if !self.uint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.uint64, fieldNumber: 6)
    }
    if !self.sint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: self.sint32, fieldNumber: 7)
    }
    if !self.sint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: self.sint64, fieldNumber: 8)
    }
    if !self.fixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: self.fixed32, fieldNumber: 9)
    }
    if !self.fixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: self.fixed64, fieldNumber: 10)
    }
    if !self.sfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: self.sfixed32, fieldNumber: 11)
    }
    if !self.sfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: self.sfixed64, fieldNumber: 12)
    }
    if !self.bool.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.bool, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithUnpackedArrays, rhs: MessageWithUnpackedArrays) -> Bool {
    if lhs.double != rhs.double {return false}
    if lhs.float != rhs.float {return false}
    if lhs.int32 != rhs.int32 {return false}
    if lhs.int64 != rhs.int64 {return false}
    if lhs.uint32 != rhs.uint32 {return false}
    if lhs.uint64 != rhs.uint64 {return false}
    if lhs.sint32 != rhs.sint32 {return false}
    if lhs.sint64 != rhs.sint64 {return false}
    if lhs.fixed32 != rhs.fixed32 {return false}
    if lhs.fixed64 != rhs.fixed64 {return false}
    if lhs.sfixed32 != rhs.sfixed32 {return false}
    if lhs.sfixed64 != rhs.sfixed64 {return false}
    if lhs.bool != rhs.bool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithMessages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithMessages"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "one"),
    2: .same(proto: "two"),
  ]

  fileprivate class _StorageClass {
    var _one: MessageWithPrimitives? = nil
    var _two: MessageWithPrimitives? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _one = source._one
      _two = source._two
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._one) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._two) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._one {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._two {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithMessages, rhs: MessageWithMessages) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._one != rhs_storage._one {return false}
        if _storage._two != rhs_storage._two {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithEnum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithEnum"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .zero {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithEnum, rhs: MessageWithEnum) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithOneOf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithOneOf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "string"),
    3: .same(proto: "bytes"),
    4: .same(proto: "int32"),
    5: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.myOneOf != nil {try decoder.handleConflictingOneOf()}
          self.myOneOf = .string(v)
        }
      }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.myOneOf != nil {try decoder.handleConflictingOneOf()}
          self.myOneOf = .bytes(v)
        }
      }()
      case 4: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.myOneOf != nil {try decoder.handleConflictingOneOf()}
          self.myOneOf = .int32(v)
        }
      }()
      case 5: try {
        var v: MessageWithPrimitives?
        var hadOneofValue = false
        if let current = self.myOneOf {
          hadOneofValue = true
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.myOneOf = .message(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    switch self.myOneOf {
    case .string?: try {
      guard case .string(let v)? = self.myOneOf else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .bytes?: try {
      guard case .bytes(let v)? = self.myOneOf else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case .int32?: try {
      guard case .int32(let v)? = self.myOneOf else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }()
    case .message?: try {
      guard case .message(let v)? = self.myOneOf else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithOneOf, rhs: MessageWithOneOf) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.myOneOf != rhs.myOneOf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageWithMaps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessageWithMaps"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringToBytes"),
    2: .same(proto: "uintToString"),
    3: .same(proto: "intToMessage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.stringToBytes) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &self.uintToString) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,MessageWithPrimitives>.self, value: &self.intToMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stringToBytes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.stringToBytes, fieldNumber: 1)
    }
    if !self.uintToString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: self.uintToString, fieldNumber: 2)
    }
    if !self.intToMessage.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,MessageWithPrimitives>.self, value: self.intToMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageWithMaps, rhs: MessageWithMaps) -> Bool {
    if lhs.stringToBytes != rhs.stringToBytes {return false}
    if lhs.uintToString != rhs.uintToString {return false}
    if lhs.intToMessage != rhs.intToMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
